{"version":3,"file":"static/webpack/static/development/pages/list/playlist.js.f2ed84cbedc4ecd40c54.hot-update.js","sources":["webpack:///./components/List/Playlist.js"],"sourcesContent":["import React, { Component } from 'react';\nimport Link from 'next/link';\nimport LazyLoad from 'react-lazyload';\nimport { connect } from 'react-redux';\nimport { fetchListPlaylist } from '../../redux/actions/list';\n\nimport Header from '../Header'\nimport Loading from '../Loading'\nimport Img from '../Img'\n\nclass Playlist extends Component {\n    constructor(props) {\n        super(props);\n\n        let {playlist} = props\n        \n        this.state = {\n            playlistData: playlist,\n            page: 0,\n            finished: false,\n            isFoot: true,\n        }\n    }\n      \n    static getDerivedStateFromProps(nextProps, prevState) {\n        if (nextProps.playlist && nextProps.playlist !== prevState.playlistData) {\n            return {\n                playlistData: nextProps.playlist,\n                isFoot: nextProps.more,\n                finished: !nextProps.more\n            };\n        }\n        \n        return null; \n    }\n\n    componentDidMount() {\n        if(this.props.isServer && !this.state.playlistData.length) {\n            this.setState({\n                playlistData: []\n            })\n            this.props.fetchListPlaylist(0)\n        }\n    }\n\n    //接触屏幕\n    touchStart(e) {\n        this.startx = e.touches[0].pageX;\n        this.starty = e.touches[0].pageY;\n    }\n    //离开屏幕（[e.changedTouches][2]）\n    touchEnd(e) {\n        let endx, endy;\n        endx = e.changedTouches[0].pageX;\n        endy = e.changedTouches[0].pageY;\n        let direction = this.getDirection(this.startx, this.starty, endx, endy);\n        switch (direction) {\n            case 0:\n                // console.log(\"未滑动！\");\n                break;\n            case 1:\n                // console.log(\"向上！\");\n                this.loadData();\n                break;\n            case 2:\n                // console.log(\"向下！\");\n                break;\n            case 3:\n                // console.log(\"向左！\");\n                break;\n            case 4:\n                // console.log(\"向右！\");\n                break;\n            default:\n        }\n    }\n    //触摸点和离开点连线与[x轴角度][3]\n    getAngle(angx,angy) {\n        return Math.atan2(angy, angx) * 180 / Math.PI;\n    }\n    //根据接触和离开判断方向 1向上 2向下 3向左 4向右 0未发生滑动（[Math.abs][4]）\n    getDirection(startx, starty, endx, endy) {\n        let angx = endx - startx;\n        let angy = endy - starty;\n        let result = 0;\n\n        //如果滑动距离太短\n        if (Math.abs(angx) < 2 && Math.abs(angy) < 2) {\n            return result;\n        }\n        let angle = this.getAngle(angx, angy);\n        \n        if (angle >= -135 && angle <= -45) {\n            result = 1;\n        } else if (angle > 45 && angle < 135) {\n            result = 2;\n        } else if ((angle >= 135 && angle <= 180) || (angle >= -180 && angle < -135)) {\n            result = 3;\n        } else if (angle >= -45 && angle <= 45) {\n            result = 4;\n        }\n\n        return result;\n    }\n\n    loadData() {\n        let {fetchListPlaylist} = this.props\n        \n        let dataHeight = this.refs.onPullUp.clientHeight;\n        let scrollHeight = document.body.scrollTop || document.documentElement.scrollTop;\n        let screenHeight = document.documentElement.clientHeight;\n        const h = 10;//自定义距离底部多少时concat数据\n        if (dataHeight - scrollHeight - h < screenHeight && this.state.isFoot) {\n            this.setState({\n                isFoot: false,\n                page: this.state.page + 1\n            }, () => {\n                fetchListPlaylist(this.state.page)\n            });\n        }\n    }\n    \n    render () {\n        let {playlistData, finished, isFoot} = this.state\n\n        return (\n            <div id=\"playlist\">\n                <Header title=\"推荐歌单\" />\n                <div className=\"scroll_wrapper\" ref=\"onPullUp\" onTouchStart={this.touchStart.bind(this)} onTouchEnd={this.touchEnd.bind(this)}>\n                    <ul className=\"list\">\n                        {\n                            playlistData.map((play, i) => {\n                                let playCount = play.playCount > 100000 ? parseInt(play.playCount / 10000) + '万' : parseInt(play.playCount)\n                                \n                                return (\n                                    <li key={play.id}>\n                                        <div className=\"pic\">\n                                            <LazyLoad height=\"3.72rem\" placeholder={<img src=\"/static/images/img_default.svg\" />}>\n                                                <Img imgUrl={play.coverImgUrl + '?param=400y400'} />\n                                            </LazyLoad>\n                                            <span className=\"count\">\n                                                <i className=\"icon-headset\"></i>\n                                                <em>{playCount}</em>\n                                            </span>\n                                        </div>\n                                        <p className=\"desc\">{play.name}</p>\n                                        <Link href={{ pathname: '/detail/playlist', query: { id: play.id } }}>\n                                            <a className=\"mask\"></a>\n                                        </Link>\n                                    </li>\n                                )\n                            })\n                        }\n                    </ul>\n                    {\n                        !finished ? (\n                            playlistData.length && isFoot ? <p className=\"scroll-tip\">上拉加载更多</p> : <Loading />\n                        ) : (\n                            <p className=\"scroll-tip\">我是有底线的</p>\n                        )\n                    }\n                </div>\n            </div>\n        )\n    }\n    \n};\n\nconst mapStateToProps = state => ({\n    playlist: state.list.playlist.playlists,\n    more:  state.list.playlist.more\n});\n  \nconst mapDispatchToProps = dispatch => ({\n    fetchListPlaylist(page) {\n      dispatch(fetchListPlaylist(page));\n    }\n});\n  \nexport default connect(mapStateToProps, mapDispatchToProps)(Playlist);\n  "],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AADA;AAKA;AACA;AACA;AACA;AACA;AAJA;AALA;AAWA;AACA;;;AAaA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAjBA;AAmBA;AACA;;;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AAAA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;;;AA5IA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;;;;AAxBA;AACA;AA2JA;AACA;AACA;AAAA;AACA;AACA;AAFA;AAAA;AACA;AAIA;AAAA;AACA;AACA;AACA;AAHA;AAAA;AACA;AAKA;;;;A","sourceRoot":""}