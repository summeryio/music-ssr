{"version":3,"file":"static/webpack/static\\development\\pages\\index.js.b4c9ea337ef6982bb8aa.hot-update.js","sources":["webpack:///./components/Home/Recommend.js"],"sourcesContent":["import React, { Component } from 'react';\r\nimport Link from 'next/link';\r\nimport LazyLoad from 'react-lazyload'\r\nimport { connect } from 'react-redux';\r\nimport { fetchHomeBanner, fetchHomePlaylist, fetchHomeAlbum } from '../../redux/actions/home';\r\n\r\nimport HomeModule from './HomeModule'\r\nimport Loading from '../Loading'\r\nimport Img from '../Img'\r\n\r\n\r\nclass Home extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        let {banner, playlist, album} = props\r\n        \r\n        this.state = {\r\n          bannerData: banner,\r\n          playlistData: playlist,\r\n          albumData: album,\r\n        }\r\n\r\n        this.swiper = null\r\n    }\r\n      \r\n    static getDerivedStateFromProps(nextProps, prevState) {\r\n        if (nextProps.banner && nextProps.banner !== prevState.bannerData) {\r\n            return {\r\n                bannerData: nextProps.banner\r\n            };\r\n        }\r\n\r\n        if (nextProps.playlist && nextProps.playlist !== prevState.playlistData) {\r\n            return {\r\n                playlistData: nextProps.playlist\r\n            };\r\n        }\r\n\r\n        if (nextProps.album && nextProps.album !== prevState.albumData) {\r\n            return {\r\n                albumData: nextProps.album\r\n            };\r\n        }\r\n        \r\n        return null; \r\n    }\r\n\r\n    componentDidUpdate() {\r\n        this.swiper.update()\r\n    }\r\n\r\n    componentDidMount() {\r\n        if(this.props.isServer) {\r\n            this.props.fetchHomeBanner(2)\r\n            this.props.fetchHomePlaylist()\r\n            this.props.fetchHomeAlbum()\r\n        }\r\n\r\n        this.swiper = new Swiper('.swiper-container', {\r\n            resistanceRatio: 0,\r\n            pagination: {\r\n                el: '.swiper-pagination',\r\n            },\r\n        });\r\n    }\r\n    \r\n    render () {\r\n        let {bannerData, playlistData, albumData} = this.state\r\n\r\n        return (\r\n            <HomeModule {...{\r\n                id: 'home',\r\n                nav: 'recommend'\r\n            }}>\r\n                <div className=\"banner swiper-container\">\r\n                    <div className=\"sliderWrap swiper-wrapper\">\r\n                        {\r\n                            bannerData.map((banner, b) => {\r\n                                let {imageUrl} = banner\r\n                                \r\n                                return (\r\n                                    <Link href=\"/\"  key={b}>\r\n                                        <a className=\"swiper-slide\"><img src={imageUrl && imageUrl + '?param=1024y400'} /></a>\r\n                                    </Link>\r\n                                )\r\n                            })\r\n                        }\r\n                    </div>\r\n                    <div className=\"swiper-pagination\"></div>\r\n                </div>\r\n                {\r\n                    // playlistData.length ? (\r\n                        <div>\r\n                            <div className=\"playlist home-list\">\r\n                                <div className=\"title\">\r\n                                    <Link href=\"/list/playlist\"><a>\r\n                                        <span>推荐歌单</span>\r\n                                        <i className=\"iconfont icon-right_\"></i>\r\n                                    </a></Link>\r\n                                </div>\r\n                                <ul className=\"list\">\r\n                                    {\r\n                                        playlistData.map(play => {\r\n                                            let playCount = play.playCount > 100000 ? parseInt(play.playCount / 10000) + '万' : parseInt(play.playCount)\r\n                                            \r\n                                            return (\r\n                                                <li key={play.id}>\r\n                                                    <div className=\"pic\">\r\n                                                        <LazyLoad height='2.34rem' placeholder={<img src={play.picUrl + '?param=40y40'} />}>    \r\n                                                            <Img imgUrl={play.picUrl + '?param=400y400'} />\r\n                                                        </LazyLoad>\r\n                                                        <span className=\"count\">\r\n                                                            <i className=\"iconfont icon-earphonee\"></i>\r\n                                                            <em>{playCount}</em>\r\n                                                        </span>\r\n                                                    </div>\r\n                                                    <p className=\"desc\">{play.name}</p>\r\n                                                    <Link prefetch href={{ pathname: '/detail/playlist', query: { id: play.id } }}>\r\n                                                        <a className=\"mask\"></a>\r\n                                                    </Link>\r\n                                                </li>\r\n                                            )\r\n                                        })\r\n                                    }\r\n                                </ul>\r\n                            </div>\r\n                            <div className=\"albumlist home-list\">\r\n                                <div className=\"title\">\r\n                                    <Link href=\"/list/album\"><a>\r\n                                        <span>新碟上架</span>\r\n                                        <i className=\"iconfont icon-right_\"></i>\r\n                                    </a></Link>\r\n                                </div>\r\n                                <ul className=\"list\">\r\n                                    {\r\n                                        albumData.map(play => {\r\n                                            return (\r\n                                                <li key={play.id}>\r\n                                                    <div className=\"pic\">\r\n                                                        <LazyLoad height='2.34rem' placeholder={<img src=\"/static/images/img_default.svg\" />}>    \r\n                                                            <Img imgUrl={play.picUrl + '?param=400y400'} />\r\n                                                        </LazyLoad>\r\n                                                    </div>\r\n                                                    <p className=\"desc\">{play.name}</p>\r\n                                                    <Link prefetch href={{ pathname: '/detail/album', query: { id: play.id } }}>\r\n                                                        <a className=\"mask\"></a>\r\n                                                    </Link>\r\n                                                </li>\r\n                                            )\r\n                                        })\r\n                                    }\r\n                                </ul>\r\n                            </div>\r\n                        </div>\r\n                    // ) : <Loading />\r\n                }\r\n                \r\n            </HomeModule>\r\n        )\r\n    }\r\n    \r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n    banner: state.home.banner.banners,\r\n    playlist: state.home.playlist.playlists,\r\n    album: state.home.album.albums,\r\n});\r\n  \r\nconst mapDispatchToProps = dispatch => ({\r\n    fetchHomeBanner(pageSize) {\r\n      dispatch(fetchHomeBanner(pageSize));\r\n    },\r\n  \r\n    fetchHomePlaylist() {\r\n      dispatch(fetchHomePlaylist());\r\n    },\r\n  \r\n    fetchHomeAlbum() {\r\n      dispatch(fetchHomeAlbum());\r\n    }\r\n});\r\n  \r\nexport default connect(mapStateToProps, mapDispatchToProps)(Home)\r\n  "],"mappings":"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","sourceRoot":""}