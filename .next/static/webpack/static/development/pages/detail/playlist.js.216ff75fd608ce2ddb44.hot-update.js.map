{"version":3,"file":"static/webpack/static/development/pages/detail/playlist.js.216ff75fd608ce2ddb44.hot-update.js","sources":["webpack:///./components/Comment.js"],"sourcesContent":["import React, { Component, Fragment } from 'react'\nimport LazyLoad from 'react-lazyload';\nimport { connect } from 'react-redux';\nimport { fetchCommonComment } from '../redux/actions/common';\n\nimport {formatDateYMD} from '../core/util'\nimport Loading from './Loading'\nimport Img from './Img'\nimport PullLoadData from './PullLoadData'\n\nclass Comment extends Component {\n    static async getInitialProps (props) {\n        const { store, isServer, query } = props.ctx;\n        console.log(1111);\n        store.dispatch(fetchCommonComment(query.id));\n\n        return { isServer };\n    }\n    \n    render() {\n        let {data} = this.props\n        \n        return (\n            <div id=\"comment\">\n                {\n                    Object.keys(data).length ? (\n                        <Fragment>\n                            {\n                                data.hotComments.length ? (\n                                    <Fragment>\n                                        <h6 className=\"t\">精彩评论</h6>\n                                        <ul>\n                                            {\n                                                data.hotComments.map(comment => (\n                                                    <li key={comment.commentId}>\n                                                        <div className=\"pic\">\n                                                            <Img \n                                                                {...{\n                                                                    url: comment.user.avatarUrl,\n                                                                    size: 60,\n                                                                }}\n                                                            />\n                                                        </div>\n                                                        <div className=\"intro\">\n                                                            <div className=\"top\">\n                                                                <a href=\"/\" className=\"name\">{comment.user.nickname}</a>\n                                                                <p className=\"time\">{formatDateYMD(comment.time)}</p>\n                                                                <p className=\"like\">\n                                                                    <span>{comment.likedCount}</span>\n                                                                    <i className=\"iconfont icon-like\"></i>\n                                                                </p>\n                                                            </div>\n                                                            {\n                                                                Object.keys(comment.beReplied).length ? (\n                                                                    <div className=\"replied\">\n                                                                        <p className=\"self\">\n                                                                            回复\n                                                                            <a href=\"/\">@{comment.beReplied[0].user.nickname}</a>：\n                                                                            {comment.content}\n                                                                        </p>\n                                                                        {\n                                                                            comment.beReplied[0].content ? (\n                                                                                <p className=\"to\">@{comment.beReplied[0].user.nickname}：{comment.beReplied[0].content}</p>\n                                                                            ) : (\n                                                                                <p className=\"to\">该评论已删除</p>\n                                                                            )\n                                                                        }\n                                                                        \n                                                                    </div>\n                                                                ) : (\n                                                                    <p className=\"cont\">{comment.content}</p>\n                                                                )\n                                                            }\n                                                            \n                                                        </div>\n                                                    </li>\n                                                ))\n                                            }\n                                        </ul>\n                                    </Fragment>\n                                ) : null\n                            }\n                            {\n                                data.comments.length && (\n                                    <Fragment>\n                                        <h6 className=\"t\">最新评论</h6>\n                                        <ul>\n                                            {\n                                                data.comments.map(comment => (\n                                                    <li key={comment.commentId}>\n                                                        <div className=\"pic\">\n                                                            <Img \n                                                                {...{\n                                                                    url: comment.user.avatarUrl,\n                                                                    size: 60,\n                                                                }}\n                                                            />\n                                                        </div>\n                                                        <div className=\"intro\">\n                                                            <div className=\"top\">\n                                                                <a href=\"/\" className=\"name\">{comment.user.nickname}</a>\n                                                                <p className=\"time\">{formatDateYMD(comment.time)}</p>\n                                                                <p className=\"like\">\n                                                                    <span>{comment.likedCount}</span>\n                                                                    <i className=\"iconfont icon-like\"></i>\n                                                                </p>\n                                                            </div>\n                                                            {\n                                                                Object.keys(comment.beReplied).length ? (\n                                                                    <div className=\"replied\">\n                                                                        <p className=\"self\">\n                                                                            回复\n                                                                            <a href=\"/\">@{comment.beReplied[0].user.nickname}</a>：\n                                                                            {comment.content}\n                                                                        </p>\n                                                                        {\n                                                                            comment.beReplied[0].content ? (\n                                                                                <p className=\"to\">@{comment.beReplied[0].user.nickname}：{comment.beReplied[0].content}</p>\n                                                                            ) : (\n                                                                                <p className=\"to\">该评论已删除</p>\n                                                                            )\n                                                                        }\n                                                                        \n                                                                    </div>\n                                                                ) : (\n                                                                    <p className=\"cont\">{comment.content}</p>\n                                                                )\n                                                            }\n                                                            \n                                                        </div>\n                                                    </li>\n                                                ))\n                                            }\n                                        </ul>\n                                    </Fragment>\n                                )\n                            }\n                        </Fragment>\n                    ) : null\n                }\n            </div>\n        )\n    }\n}\n  \n// export default Comment\nconst mapStateToProps = state => ({\n    comment: state.common.comment.comments,\n});\n  \nconst mapDispatchToProps = dispatch => ({\n    fetchCommonComment(id) {\n      dispatch(fetchCommonComment(id));\n    },\n});\n  \nexport default connect(mapStateToProps, mapDispatchToProps)(Comment)"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AASA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAFA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AArCA;AAmDA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAFA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AArCA;AAsDA;;;;;;AAnIA;;;;;;;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;;AAPA;AACA;AACA;AAsIA;AAAA;AACA;AADA;AAAA;AACA;AAGA;AAAA;AACA;AACA;AACA;AAHA;AAAA;AACA;AAKA;;;;A","sourceRoot":""}