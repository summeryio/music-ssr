{"version":3,"file":"static/webpack/static\\development\\pages\\home\\recommend.js.943642ecf174021b4b66.hot-update.js","sources":["webpack:///./components/Home/Recommend.js"],"sourcesContent":["import React, { Component } from 'react';\nimport Link from 'next/link';\nimport LazyLoad from 'react-lazyload'\nimport { connect } from 'react-redux';\nimport { fetchHomeBanner, fetchHomePlaylist, fetchHomeAlbum } from '../../redux/actions/home';\n\nimport HomeModule from './HomeModule'\nimport Loading from '../Loading'\n\nclass Home extends Component {\n    constructor(props) {\n        super(props);\n\n        let {banner, playlist, album} = props\n        \n        this.state = {\n          bannerData: banner,\n          playlistData: playlist,\n          albumData: album,\n        }\n\n        this.swiper = null\n    }\n      \n    static getDerivedStateFromProps(nextProps, prevState) {\n        if (nextProps.banner && nextProps.banner !== prevState.bannerData) {\n            return {\n                bannerData: nextProps.banner\n            };\n        }\n\n        if (nextProps.playlist && nextProps.playlist !== prevState.playlistData) {\n            return {\n                playlistData: nextProps.playlist\n            };\n        }\n\n        if (nextProps.album && nextProps.album !== prevState.albumData) {\n            return {\n                albumData: nextProps.album\n            };\n        }\n        \n        return null; \n    }\n\n    componentDidUpdate() {\n        this.swiper.update()\n    }\n\n    componentDidMount() {\n        if(this.props.isServer) {\n            this.props.fetchHomeBanner(2)\n            this.props.fetchHomePlaylist()\n            this.props.fetchHomeAlbum()\n        }\n\n        this.swiper = new Swiper('.swiper-container', {\n            resistanceRatio: 0,\n            pagination: {\n                el: '.swiper-pagination',\n            },\n        });\n    }\n    \n    render () {\n        let {bannerData, playlistData, albumData} = this.state\n\n        return (\n            <HomeModule {...{\n                id: 'home',\n                nav: 'recommend'\n            }}>\n                <div className=\"banner swiper-container\">\n                    <div className=\"sliderWrap swiper-wrapper\">\n                        {\n                            bannerData.map((banner, b) => {\n                                let {imageUrl} = banner\n                                \n                                return (\n                                    <Link href=\"/\"  key={b}>\n                                        <a className=\"swiper-slide\"><img src={imageUrl && imageUrl + '?param=1024y400'} /></a>\n                                    </Link>\n                                )\n                            })\n                        }\n                    </div>\n                    <div className=\"swiper-pagination\"></div>\n                </div>\n                {\n                    playlistData.length ? (\n                        <div>\n                            <div className=\"playlist home-list\">\n                                <div className=\"title\">\n                                    <Link href=\"/list/playlist\"><a>\n                                        <span>推荐歌单</span>\n                                        <i className=\"iconfont icon-right_\"></i>\n                                    </a></Link>\n                                </div>\n                                <ul className=\"list\">\n                                    {\n                                        playlistData.map(play => {\n                                            let playCount = play.playCount > 100000 ? parseInt(play.playCount / 10000) + '万' : parseInt(play.playCount)\n                                            \n                                            return (\n                                                <li key={play.id}>\n                                                    <div className=\"pic\">\n                                                        <img src={play.picUrl + '?param=400y400'} />\n                                                        <span className=\"count\">\n                                                            <i className=\"iconfont icon-earphonee\"></i>\n                                                            <em>{playCount}</em>\n                                                        </span>\n                                                    </div>\n                                                    <p className=\"desc\">{play.name}</p>\n                                                    <Link href={`/playlist-detail/${play.id}`}><a className=\"mask\"></a></Link>\n                                                </li>\n                                            )\n                                        })\n                                    }\n                                </ul>\n                            </div>\n                            <div className=\"albumlist home-list\">\n                                <div className=\"title\">\n                                    <Link href=\"/list/album\"><a>\n                                        <span>新碟上架</span>\n                                        <i className=\"iconfont icon-right_\"></i>\n                                    </a></Link>\n                                </div>\n                                <ul className=\"list\">\n                                    {\n                                        albumData.map(play => {\n                                            return (\n                                                <li key={play.id}>\n                                                    <div className=\"pic\">\n                                                        <LazyLoad height='2.34rem' placeholder={<img src=\"/static/images/img_default.svg\" />}>    \n                                                            <img src={play.picUrl + '?param=400y400'} />\n                                                        </LazyLoad>\n                                                    </div>\n                                                    <p className=\"desc\">{play.name}</p>\n                                                    <Link href={`/album-detail/${play.id}`}><a className=\"mask\"></a></Link>\n                                                </li>\n                                            )\n                                        })\n                                    }\n                                </ul>\n                            </div>\n                        </div>\n                    ) : <Loading />\n                }\n                \n            </HomeModule>\n        )\n    }\n    \n};\n\nconst mapStateToProps = state => ({\n    banner: state.home.banner.banners,\n    playlist: state.home.playlist.playlists,\n    album: state.home.album.albums,\n});\n  \nconst mapDispatchToProps = dispatch => ({\n    fetchHomeBanner(pageSize) {\n      dispatch(fetchHomeBanner(pageSize));\n    },\n  \n    fetchHomePlaylist() {\n      dispatch(fetchHomePlaylist());\n    },\n  \n    fetchHomeAlbum() {\n      dispatch(fetchHomeAlbum());\n    }\n});\n  \nexport default connect(mapStateToProps, mapDispatchToProps)(Home);\n  "],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AADA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AAHA;AAMA;AAXA;AAYA;AACA;;;AAuBA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAFA;AAMA;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAGA;AAEA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;;;AAhIA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;;;;AAnCA;AACA;AAgJA;AACA;AACA;AAAA;AACA;AACA;AACA;AAHA;AAAA;AACA;AAKA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAXA;AAAA;AACA;AAaA;;;;A","sourceRoot":""}